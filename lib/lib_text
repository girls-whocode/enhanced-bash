#!/usr/bin/env bash

# ##################################################
# Shared bash functions used by my bash scripts.
#
# VERSION 1.0.0
#
# HISTORY
#
# * 2015-01-02 - v1.0.0   - First Creation
# * 2015-04-16 - v1.2.0   - Added 'checkDependencies' and 'pauseScript'
# * 2016-01-10 - v1.3.0   - Added 'join' function
# * 2016-01-11 - v1.4.9   - Added 'httpStatus' function
#
# ##################################################

# Text Transformations
# -----------------------------------
# Transform text using these functions.
# Adapted from https://github.com/jmcantrell/bashful
# -----------------------------------

function lower() {
  # Convert stdin to lowercase.
  # usage:  text=$(lower <<<"$1")
  #         echo "MAKETHISLOWERCASE" | lower
  tr '[:upper:]' '[:lower:]'
}

function upper() {
  # Convert stdin to uppercase.
  # usage:  text=$(upper <<<"$1")
  #         echo "MAKETHISUPPERCASE" | upper
  tr '[:lower:]' '[:upper:]'
}

function ltrim() {
  # Removes all leading whitespace (from the left).
  local char=${1:-[:space:]}
    sed "s%^[${char//%/\\%}]*%%"
}

function rtrim() {
  # Removes all trailing whitespace (from the right).
  local char=${1:-[:space:]}
  sed "s%[${char//%/\\%}]*$%%"
}

function trim() {
  # Removes all leading/trailing whitespace
  # Usage examples:
  #     echo "  foo  bar baz " | trim  #==> "foo  bar baz"
  ltrim "$1" | rtrim "$1"
}

function squeeze() {
  # Removes leading/trailing whitespace and condenses all other consecutive
  # whitespace into a single space.
  #
  # Usage examples:
  #     echo "  foo  bar   baz  " | squeeze  #==> "foo bar baz"

  local char=${1:-[[:space:]]}
  sed "s%\(${char//%/\\%}\)\+%\1%g" | trim "$char"
}

function squeeze_lines() {
    # <doc:squeeze_lines> {{{
    #
    # Removes all leading/trailing blank lines and condenses all other
    # consecutive blank lines into a single blank line.
    #
    # </doc:squeeze_lines> }}}

    sed '/^[[:space:]]\+$/s/.*//g' | cat -s | trim_lines
}

function htmlDecode() {
  # Decode HTML characters with sed
  # Usage: htmlDecode <string>
  echo "${1}" | sed -f "${SOURCEPATH}/htmlDecode.sed"
}

function htmlEncode() {
  # Encode HTML characters with sed
  # Usage: htmlEncode <string>
  echo "${1}" | sed -f "${SOURCEPATH}/htmlEncode.sed"
}

function urlencode() {
  # URL encoding/decoding from: https://gist.github.com/cdown/1163649
  # Usage: urlencode <string>

  local length="${#1}"
  for (( i = 0; i < length; i++ )); do
      local c="${1:i:1}"
      case $c in
          [a-zA-Z0-9.~_-]) printf "%s" "$c" ;;
          *) printf '%%%02X' "'$c"
      esac
  done
}

function urldecode() {
    # Usage: urldecode <string>

    local url_encoded="${1//+/ }"
    printf '%b' "${url_encoded//%/\x}"
}

function parse_yaml() {
  # Function to parse YAML files and add values to variables. Send it to a temp file and source it
  # https://gist.github.com/DinoChiesa/3e3c3866b51290f31243 which is derived from
  # https://gist.github.com/epiloque/8cf512c6d64641bde388
  #
  # Usage:
  #     $ parse_yaml sample.yml > /some/tempfile
  #
  # parse_yaml accepts a prefix argument so that imported settings all have a common prefix
  # (which will reduce the risk of name-space collisions).
  #
  #     $ parse_yaml sample.yml "CONF_"

    local prefix=$2
    local s
    local w
    local fs
    s='[[:space:]]*'
    w='[a-zA-Z0-9_]*'
    fs="$(echo @|tr @ '\034')"
    sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s[:-]$s\(.*\)$s\$|\1$fs\2$fs\3|p" "$1" |
    awk -F"$fs" '{
      indent = length($1)/2;
      if (length($2) == 0) { conj[indent]="+";} else {conj[indent]="";}
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
              vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
              printf("%s%s%s%s=(\"%s\")\n", "'"$prefix"'",vn, $2, conj[indent-1],$3);
      }
    }' | sed 's/_=/+=/g'
}

function makeCSV() {
  # Creates a new CSV file if one does not already exist.
  # Takes passed arguments and writes them as a header line to the CSV
  # Usage 'makeCSV column1 column2 column3'

  # Set the location and name of the CSV File
  if [ -z "${csvLocation}" ]; then
    csvLocation="${HOME}/Desktop"
  fi
  if [ -z "${csvName}" ]; then
    csvName="$(LC_ALL=C date +%Y-%m-%d)-${FUNCNAME[1]}.csv"
  fi
  csvFile="${csvLocation}/${csvName}"

  # Overwrite existing file? If not overwritten, new content is added
  # to the bottom of the existing file
  if [ -f "${csvFile}" ]; then
    seek_confirmation "${csvFile} already exists. Overwrite?"
    if is_confirmed; then
      rm "${csvFile}"
      writeCSV "$@"
    fi
  fi
}

function writeCSV() {
  # Takes passed arguments and writes them as a comma separated line
  # Usage 'writeCSV column1 column2 column3'

  csvInput=($@)
  saveIFS=$IFS
  IFS=','
  echo "${csvInput[*]}" >> "${csvFile}"
  IFS=$saveIFS
}

function json2yaml() {
  # convert json files to yaml using python and PyYAML
  python -c 'import sys, yaml, json; yaml.safe_dump(json.load(sys.stdin), sys.stdout, default_flow_style=False)' < "$1"
}

function yaml2json() {
  # convert yaml files to json using python and PyYAML
  python -c 'import sys, yaml, json; json.dump(yaml.load(sys.stdin), sys.stdout, indent=4)' < "$1"
}

function clear_screen() {
  echo -en "\033c";
}

function civis() {
  echo -en "\033[?25l";
}

function cnorm() {
  echo -en "\033[?12l\033[?25h";
}

function tputs() {
  echo -en "\033[${1};${2}H";
}

function cursorpos() {
  case $1 in
    up)
      i=0
      while [ $((++i)) -lt $2 ]; do tput cuu1; done;;
    down)
      i=0
      while [ $((++i)) -lt $2 ]; do tput cud1; done;;
    left)
      i=0
      while [ $((++i)) -lt $2 ]; do tput cul1; done;;
    right)
      tput cuf $2;;            
    col)
      i=0
      for ((i=0; i<=$2;i++)); do tput cuf1; done;;
    pos)
      tput cup $2 $3;;
    *)
      echo "Invalid option";;
    esac
}

function draw() {
  echo -en "\033%@";echo -en "\033(0";
}

function write() {
  echo -en "\033(B";
}

function draw_screen() {
  # j k l m n o p q r s t u v w x
  # ┘ ┐ ┌ └ ┼ ⎺ ⎻ ─ ⎼ ⎽ ├ ┤ ┴ ┬ │
  # Help cols 80

  [ -z $1 ] && rows=7 || rows=$1
  [ -z $3 ] && cols=80 || cols=$3

  civis
  draw
  echo -en "${Grey}  l"

  for ((c=0; c <= $3; c++));do
    echo -en "q"
  done

  echo -e "${Grey}k"
  echo -en "${Grey}  x"

  for ((c=0; c <= $3; c++));do
    echo -en " "
  done

  echo -e "x"
  echo -en "${Grey}  t"

  for ((c=0; c <= $3; c++));do
    echo -en "q"
  done

  echo -e "u"

  for ((i=0; i <= rows; i++)); do
    echo -en "${Grey}  x"
    for ((c=0; c <= $3; c++));do
      echo -en " "
    done
    echo -e "x"
  done

  if [ -z $2 ] || [ $2 == 0 ]; then
    echo -en "${Grey}  m"
    for ((c=0; c <= $3; c++));do
      echo -en "q"
    done
    echo -e "j"
  elif [ $2 == 1 ]; then
    echo -en "${Grey}  t"
    for ((c=0; c <= $3; c++));do
      echo -en "q"
    done
    echo -e "u"
    echo -en "${Grey}  x"
    for ((c=0; c <= $3; c++));do
      echo -en " "
    done
    echo -e "x"
    echo -en "${Grey}  m"
    for ((c=0; c <= $3; c++));do
      echo -en "q"
    done
    echo -e "j"
  else
    echo -en "${Grey}  t"
    for ((c=0; c <= $3; c++));do
      echo -en "q"
    done
    echo -e "u"
    echo -en "${Grey}  x"
    for ((c=0; c <= $3; c++));do
      echo -en " "
    done
    echo -e "x"
    echo -en "${Grey}  t"
    for ((c=0; c <= $3; c++));do
      echo -en "q"
    done
    echo -e "u"
    for ((i=0; i <= $2; i++)); do
      echo -en "${Grey}  x"
      for ((c=0; c <= $3; c++));do
        echo -en " "
      done
      echo -e "x"
    done
    echo -en "${Grey}  m"
    for ((c=0; c <= $3; c++));do
      echo -en "q"
    done
    echo -e "j"
  fi
  
  write
  cnorm
}

function readablesize() { 
  # Convert to a readable size
	if [ $1 -ge 1048576 ]; then
		echo "$(scriptbc -p 2 $1 / 1048576)GB"
	elif [ $1 -ge 1024 ]; then
		echo "$(scriptbc -p 2 $1 / 1024)MB"
	else
		echo "${1}KB"
	fi
}

function scriptbc() {
	if [ "$1" == "-p" ] ; then
		precision=$2
		shift 2
	else
		precision=2
	fi

  bc -q -l scale=$precision $* quit
	return 0
}