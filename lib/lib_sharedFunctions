#!/usr/bin/env bash

# ##################################################
# Shared bash functions used by my bash scripts.
#
# VERSION 1.4.0
#
# HISTORY
#
# * 2015-01-02 - v1.0.0   - First Creation
# * 2015-04-16 - v1.2.0   - Added 'checkDependencies' and 'pauseScript'
# * 2016-01-10 - v1.3.0   - Added 'join' function
# * 2016-01-11 - v1.4.9   - Added 'httpStatus' function
#
# ##################################################

# Traps
# ------------------------------------------------------
# These functions are for use with different trap scenarios
# ------------------------------------------------------
# Non destructive exit for when script exits naturally.
# Usage: Add this function at the end of every script

function safeExit() {
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  trap - INT TERM EXIT
  exit
}

function function_exists() {
  declare -f -F $1 > /dev/null
  return $?
}

function showMatches() {
	matches=0
	echo -e "s/$pattern/${Red}$pattern${txtreset}/g" > $sedscript
	for lineno in $(grep -n "$pattern" $1 | cut -d: -f1)
	do
		if [ $context -gt 0 ]; then
			prev="$(( $lineno - $context ))"
			if [ $prev -lt 1 ]; then
				# This results in "invalid usage of line address 0."
				prev="1"
			fi
			x next="$(( $lineno + $context ))"
			if [ $matches -gt 0 ]; then
				echo "${prev}i\\" >> $sedscript
				echo "----" >> $sedscript
			fi
			echo "${prev},${next}p" >> $sedscript
		else
			echo "${lineno}p" >> $sedscript
		fi
		matches="$(( $matches + 1 ))"
	done

	if [ $matches -gt 0 ] ; then
		sed -n -f $sedscript $1 | uniq | more
	fi
}

function keycapture() {
  # Capture the escape seq. code for pressed key
  sed -n l
}

function chk_root(){
	local meid=$(id -u)
	if [ $meid -ne 0 ]; then
		warning "You must be root user to run this tool"
	fi
}

function readFile() {
  unset "${result}"
  while read result
  do
    echo "${result}"
  done < "$1"
}

function escape() {
  echo "${@}" | sed 's/[]\.|$(){}?+*^]/\\&/g';
}

function needSudo() {
  # needSudo
  # ------------------------------------------------------
  # If a script needs sudo access, call this function which
  # requests sudo access and then keeps it alive.
  # ------------------------------------------------------

  # Update existing sudo time stamp if set, otherwise do nothing.
  sudo -v
  while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
}

function convertsecs() {
  # convertsecs
  # ------------------------------------------------------
  # Convert Seconds to human readable time
  #
  # To use this, pass a number (seconds) into the function as this:
  # print "$(convertsecs $TOTALTIME)"
  #
  # To compute the time it takes a script to run use tag the start and end times with
  #   STARTTIME=$(date +"%s")
  #   ENDTIME=$(date +"%s")
  #   TOTALTIME=$(($ENDTIME-$STARTTIME))
  # ------------------------------------------------------

  ((h=${1}/3600))
  ((m=(${1}%3600)/60))
  ((s=${1}%60))
  printf "%02d:%02d:%02d\n" $h $m $s
}

function join() {
  # Join
  # ----------------------------------------------
  # This function joins items together with a user specified separator
  # Taken whole cloth from: 
  #   http://stackoverflow.com/questions/1527049/bash-join-elements-of-an-array
  #
  # Usage:
  #   join , a "b c" d #a,b c,d
  #   join / var local tmp #var/local/tmp
  #   join , "${FOO[@]}" #a,b,c
  # ----------------------------------------------

  local IFS="${1}";
  shift;
  echo "${*}";
}

function seek_confirmation() {
  # SEEKING CONFIRMATION
  # ------------------------------------------------------
  # Asks questions of a user and then does something with the answer.
  # y/n are the only possible answers.
  #
  # USAGE:
  # seek_confirmation "Ask a question"
  # if is_confirmed; then
  #   some action
  # else
  #   some other action
  # fi
  #
  # Credt: https://github.com/kevva/dotfiles
  # ------------------------------------------------------

  # Ask the question
  # echo ""
  input "$@"
  if "${force}"; then
    notice "Forcing confirmation with '--force' flag set"
  else
    read -p " (y/n) " -n 1
    echo ""
  fi
}

function is_confirmed() {
  # Test whether the result of an 'ask' is a confirmation
  if "${force}"; then
    return 0
  else
    if [[ "${REPLY}" =~ ^[Yy]$ ]]; then
      return 0
    fi
    return 1
  fi
}

function is_not_confirmed() {
  if "${force}"; then
    return 1
  else
    if [[ "${REPLY}" =~ ^[Nn]$ ]]; then
      return 0
    fi
    return 1
  fi
}

function skip() {
  # Skip something
  # ------------------------------------------------------
  # Offer the user a chance to skip something.
  # Credit: https://github.com/cowboy/dotfiles
  # ------------------------------------------------------

  REPLY=noskip
  read -t 5 -n 1 -s -p "${bold}To skip, press ${underline}X${reset}${bold} within 5 seconds.${reset}"
  if [[ "$REPLY" =~ ^[Xx]$ ]]; then
    notice "  Skipping!"
    return 0
  else
    notice "  Continuing..."
    return 1
  fi
}

function pauseScript() {
  # A simple function used to pause a script at any point and
  # only continue on user input
  seek_confirmation "Ready to continue?"
  if is_confirmed; then
    info "Continuing"
  else
    warning "Exiting Script."
    safeExit
  fi
}

function in_array() {
    # Determine if a value is in an array.
    # Usage: if in_array "VALUE" "${ARRAY[@]}"; then ...
    local value="$1"; shift
    for arrayItem in "$@"; do
        [[ "${arrayItem}" == "${value}" ]] && return 0
    done
    return 1
}

# Text Transformations
# -----------------------------------
# Transform text using these functions.
# Adapted from https://github.com/jmcantrell/bashful
# -----------------------------------

function lower() {
  # Convert stdin to lowercase.
  # usage:  text=$(lower <<<"$1")
  #         echo "MAKETHISLOWERCASE" | lower
  tr '[:upper:]' '[:lower:]'
}

function upper() {
  # Convert stdin to uppercase.
  # usage:  text=$(upper <<<"$1")
  #         echo "MAKETHISUPPERCASE" | upper
  tr '[:lower:]' '[:upper:]'
}

function ltrim() {
  # Removes all leading whitespace (from the left).
  local char=${1:-[:space:]}
    sed "s%^[${char//%/\\%}]*%%"
}

function rtrim() {
  # Removes all trailing whitespace (from the right).
  local char=${1:-[:space:]}
  sed "s%[${char//%/\\%}]*$%%"
}

function trim() {
  # Removes all leading/trailing whitespace
  # Usage examples:
  #     echo "  foo  bar baz " | trim  #==> "foo  bar baz"
  ltrim "$1" | rtrim "$1"
}

function squeeze() {
  # Removes leading/trailing whitespace and condenses all other consecutive
  # whitespace into a single space.
  #
  # Usage examples:
  #     echo "  foo  bar   baz  " | squeeze  #==> "foo bar baz"

  local char=${1:-[[:space:]]}
  sed "s%\(${char//%/\\%}\)\+%\1%g" | trim "$char"
}

function squeeze_lines() {
    # <doc:squeeze_lines> {{{
    #
    # Removes all leading/trailing blank lines and condenses all other
    # consecutive blank lines into a single blank line.
    #
    # </doc:squeeze_lines> }}}

    sed '/^[[:space:]]\+$/s/.*//g' | cat -s | trim_lines
}

function htmlDecode() {
  # Decode HTML characters with sed
  # Usage: htmlDecode <string>
  echo "${1}" | sed -f "${SOURCEPATH}/htmlDecode.sed"
}

function htmlEncode() {
  # Encode HTML characters with sed
  # Usage: htmlEncode <string>
  echo "${1}" | sed -f "${SOURCEPATH}/htmlEncode.sed"
}

function urlencode() {
  # URL encoding/decoding from: https://gist.github.com/cdown/1163649
  # Usage: urlencode <string>

  local length="${#1}"
  for (( i = 0; i < length; i++ )); do
      local c="${1:i:1}"
      case $c in
          [a-zA-Z0-9.~_-]) printf "%s" "$c" ;;
          *) printf '%%%02X' "'$c"
      esac
  done
}

function urldecode() {
    # Usage: urldecode <string>

    local url_encoded="${1//+/ }"
    printf '%b' "${url_encoded//%/\x}"
}

function parse_yaml() {
  # Function to parse YAML files and add values to variables. Send it to a temp file and source it
  # https://gist.github.com/DinoChiesa/3e3c3866b51290f31243 which is derived from
  # https://gist.github.com/epiloque/8cf512c6d64641bde388
  #
  # Usage:
  #     $ parse_yaml sample.yml > /some/tempfile
  #
  # parse_yaml accepts a prefix argument so that imported settings all have a common prefix
  # (which will reduce the risk of name-space collisions).
  #
  #     $ parse_yaml sample.yml "CONF_"

    local prefix=$2
    local s
    local w
    local fs
    s='[[:space:]]*'
    w='[a-zA-Z0-9_]*'
    fs="$(echo @|tr @ '\034')"
    sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s[:-]$s\(.*\)$s\$|\1$fs\2$fs\3|p" "$1" |
    awk -F"$fs" '{
      indent = length($1)/2;
      if (length($2) == 0) { conj[indent]="+";} else {conj[indent]="";}
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
              vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
              printf("%s%s%s%s=(\"%s\")\n", "'"$prefix"'",vn, $2, conj[indent-1],$3);
      }
    }' | sed 's/_=/+=/g'
}

function httpStatus() {
  # -----------------------------------
  # Shamelessly taken from: https://gist.github.com/rsvp/1171304
  #
  # Usage:  httpStatus URL [timeout] [--code or --status] [see 4.]
  #                                             ^message with code (default)
  #                                     ^code (numeric only)
  #                           ^in secs (default: 3)
  #                   ^URL without "http://" prefix works fine.
  #
  #  4. curl options: e.g. use -L to follow redirects.
  #
  #  Dependencies: curl
  #
  #         Example:  $ httpStatus bit.ly
  #                   301 Redirection: Moved Permanently
  #
  #         Example: $ httpStatus www.google.com 100 -c
  #                  200
  #
  # -----------------------------------
  local curlops
  local arg4
  local arg5
  local arg6
  local arg7
  local flag
  local timeout
  local url

  saveIFS=${IFS}
  IFS=$' \n\t'

  url=${1}
  timeout=${2:-'3'}
  #            ^in seconds
  flag=${3:-'--status'}
  #    curl options, e.g. -L to follow redirects
  arg4=${4:-''}
  arg5=${5:-''}
  arg6=${6:-''}
  arg7=${7:-''}
  curlops="${arg4} ${arg5} ${arg6} ${arg7}"

  #      __________ get the CODE which is numeric:
  code=`echo $(curl --write-out %{http_code} --silent --connect-timeout ${timeout} \
                  --no-keepalive ${curlops} --output /dev/null  ${url})`

  #      __________ get the STATUS (from code) which is human interpretable:
  case $code in
       000) status="Not responding within ${timeout} seconds" ;;
       100) status="Informational: Continue" ;;
       101) status="Informational: Switching Protocols" ;;
       200) status="Successful: OK within ${timeout} seconds" ;;
       201) status="Successful: Created" ;;
       202) status="Successful: Accepted" ;;
       203) status="Successful: Non-Authoritative Information" ;;
       204) status="Successful: No Content" ;;
       205) status="Successful: Reset Content" ;;
       206) status="Successful: Partial Content" ;;
       300) status="Redirection: Multiple Choices" ;;
       301) status="Redirection: Moved Permanently" ;;
       302) status="Redirection: Found residing temporarily under different URI" ;;
       303) status="Redirection: See Other" ;;
       304) status="Redirection: Not Modified" ;;
       305) status="Redirection: Use Proxy" ;;
       306) status="Redirection: status not defined" ;;
       307) status="Redirection: Temporary Redirect" ;;
       400) status="Client Error: Bad Request" ;;
       401) status="Client Error: Unauthorized" ;;
       402) status="Client Error: Payment Required" ;;
       403) status="Client Error: Forbidden" ;;
       404) status="Client Error: Not Found" ;;
       405) status="Client Error: Method Not Allowed" ;;
       406) status="Client Error: Not Acceptable" ;;
       407) status="Client Error: Proxy Authentication Required" ;;
       408) status="Client Error: Request Timeout within ${timeout} seconds" ;;
       409) status="Client Error: Conflict" ;;
       410) status="Client Error: Gone" ;;
       411) status="Client Error: Length Required" ;;
       412) status="Client Error: Precondition Failed" ;;
       413) status="Client Error: Request Entity Too Large" ;;
       414) status="Client Error: Request-URI Too Long" ;;
       415) status="Client Error: Unsupported Media Type" ;;
       416) status="Client Error: Requested Range Not Satisfiable" ;;
       417) status="Client Error: Expectation Failed" ;;
       500) status="Server Error: Internal Server Error" ;;
       501) status="Server Error: Not Implemented" ;;
       502) status="Server Error: Bad Gateway" ;;
       503) status="Server Error: Service Unavailable" ;;
       504) status="Server Error: Gateway Timeout within ${timeout} seconds" ;;
       505) status="Server Error: HTTP Version Not Supported" ;;
       *)   echo " !!  httpstatus: status not defined." && safeExit ;;
  esac


  # _______________ MAIN
  case ${flag} in
       --status) echo "${code} ${status}" ;;
       -s)       echo "${code} ${status}" ;;
       --code)   echo "${code}"         ;;
       -c)       echo "${code}"         ;;
       *)        echo " !!  httpstatus: bad flag" && safeExit;;
  esac

  IFS="${saveIFS}"
}

function makeCSV() {
  # Creates a new CSV file if one does not already exist.
  # Takes passed arguments and writes them as a header line to the CSV
  # Usage 'makeCSV column1 column2 column3'

  # Set the location and name of the CSV File
  if [ -z "${csvLocation}" ]; then
    csvLocation="${HOME}/Desktop"
  fi
  if [ -z "${csvName}" ]; then
    csvName="$(LC_ALL=C date +%Y-%m-%d)-${FUNCNAME[1]}.csv"
  fi
  csvFile="${csvLocation}/${csvName}"

  # Overwrite existing file? If not overwritten, new content is added
  # to the bottom of the existing file
  if [ -f "${csvFile}" ]; then
    seek_confirmation "${csvFile} already exists. Overwrite?"
    if is_confirmed; then
      rm "${csvFile}"
      writeCSV "$@"
    fi
  fi
}

function writeCSV() {
  # Takes passed arguments and writes them as a comma separated line
  # Usage 'writeCSV column1 column2 column3'

  csvInput=($@)
  saveIFS=$IFS
  IFS=','
  echo "${csvInput[*]}" >> "${csvFile}"
  IFS=$saveIFS

}

function json2yaml() {
  # convert json files to yaml using python and PyYAML
  python -c 'import sys, yaml, json; yaml.safe_dump(json.load(sys.stdin), sys.stdout, default_flow_style=False)' < "$1"
}

function yaml2json() {
  # convert yaml files to json using python and PyYAML
  python -c 'import sys, yaml, json; json.dump(yaml.load(sys.stdin), sys.stdout, indent=4)' < "$1"
}

function clear_screen() {
    echo -en "\033c";
}

function civis() {
    echo -en "\033[?25l";
}

function cnorm() {
    echo -en "\033[?12l\033[?25h";
}

function tputs() {
    echo -en "\033[${1};${2}H";
}

function cursorpos() {
    case $1 in
        up)
            i=0
            while [ $((++i)) -lt $2 ]; do tput cuu1; done;;
        
        down)
            i=0
            while [ $((++i)) -lt $2 ]; do tput cud1; done;;
        
        left)
            i=0
            while [ $((++i)) -lt $2 ]; do tput cul1; done;;

        right)
            tput cuf $2;;            

        col)
            i=0
            for ((i=0; i<=$2;i++)); do tput cuf1; done;;
        pos)
            tput cup $2 $3;;
        *)
            echo "Invalid option";;
    esac
}

function draw() {
    echo -en "\033%@";echo -en "\033(0";
}

function write() {
    echo -en "\033(B";
}

function help_screen() {
    # j k l m n o p q r s t u v w x
    # ┘ ┐ ┌ └ ┼ ⎺ ⎻ ─ ⎼ ⎽ ├ ┤ ┴ ┬ │
    # Help cols 80

    if [ -z $1 ]; then
        rows=7
    else
        rows=$1
    fi

    civis
    draw
    echo -e "${Grey}  lqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqk"
    echo -e "${Grey}  x                                                                                x"
    echo -e "${Grey}  tqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqu"
    for ((i=0; i <= rows; i++)); do
        echo -e "${Grey}  x                                                                                x"
    done

    if [ -z $2 ]; then
        echo -e "${Grey}  mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqj"
    elif [ $2 == 1 ]; then
        echo -e "${Grey}  tqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqu"
        echo -e "${Grey}  x                                                                                x"
        echo -e "${Grey}  mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqj"
    else
        echo -e "${Grey}  tqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqu"
        echo -e "${Grey}  x                                                                                x"
        echo -e "${Grey}  tqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqu"
        for ((i=0; i <= $2; i++)); do
            echo -e "${Grey}  x                                                                                x"
        done
        echo -e "${Grey}  mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqj"
    fi

    write
    cnorm
}

function help_screen_sm() {
    if [ -z $1 ]; then
        rows=7
    else
        rows=$1
    fi

    civis
    draw
    echo -e "${Grey} lqqqqqqqqqqqqqqqqqqqqqqqqqqqqqk"
    for ((i=0; i <= rows; i++)); do
        echo -e "${Grey} x                             x"
    done

    if [ -z $2 ]; then
        echo -e "${Grey} mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqj"
    else
        echo -e "${Grey} tqqqqqqqqqqqqqqqqqqqqqqqqqqqqqu"
        echo -e "${Grey} x                             x"
        echo -e "${Grey} tqqqqqqqqqqqqqqqqqqqqqqqqqqqqqu"
        for ((i=0; i <= $2; i++)); do
            echo -e "${Grey}x                             x"
        done
        echo -e "${Grey} mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqj"
    fi
    write
    cnorm
}

function draw_screen() {
    # j k l m n o p q r s t u v w x
    # ┘ ┐ ┌ └ ┼ ⎺ ⎻ ─ ⎼ ⎽ ├ ┤ ┴ ┬ │
    # Help cols 80

    if [ -z $1 ]; then
        rows=7
    else
        rows=$1
    fi

    if [ -z $3 ]; then
        cols=80
    else
        cols=$3
    fi

    civis
    draw
    echo -en "${Grey}  l"
    for ((c=0; c <= $3; c++));do
        echo -en "q"
    done
    echo -e "${Grey}k"

    echo -en "${Grey}  x"
    for ((c=0; c <= $3; c++));do
        echo -en " "
    done
    echo -e "x"

    echo -en "${Grey}  t"
    for ((c=0; c <= $3; c++));do
        echo -en "q"
    done
    echo -e "u"

    for ((i=0; i <= rows; i++)); do
        echo -en "${Grey}  x"
        for ((c=0; c <= $3; c++));do
            echo -en " "
        done
        echo -e "x"
    done

    if [ -z $2 ] || [ $2 == 0 ]; then
        echo -en "${Grey}  m"
        for ((c=0; c <= $3; c++));do
            echo -en "q"
        done
        echo -e "j"
    elif [ $2 == 1 ]; then
        echo -en "${Grey}  t"
        for ((c=0; c <= $3; c++));do
            echo -en "q"
        done
        echo -e "u"

        echo -en "${Grey}  x"
        for ((c=0; c <= $3; c++));do
            echo -en " "
        done
        echo -e "x"

        echo -en "${Grey}  m"
        for ((c=0; c <= $3; c++));do
            echo -en "q"
        done
        echo -e "j"
    else
        echo -en "${Grey}  t"
        for ((c=0; c <= $3; c++));do
            echo -en "q"
        done
        echo -e "u"

        echo -en "${Grey}  x"
        for ((c=0; c <= $3; c++));do
            echo -en " "
        done
        echo -e "x"

        echo -en "${Grey}  t"
        for ((c=0; c <= $3; c++));do
            echo -en "q"
        done
        echo -e "u"

        for ((i=0; i <= $2; i++)); do
            echo -en "${Grey}  x"
            for ((c=0; c <= $3; c++));do
                echo -en " "
            done
            echo -e "x"
        done
        echo -en "${Grey}  m"
        for ((c=0; c <= $3; c++));do
            echo -en "q"
        done
        echo -e "j"
    fi
    
    write
    cnorm
}

function readablesize() { 
  # Convert to a readable size
	if [ $1 -ge 1048576 ]; then
		echo "$(scriptbc -p 2 $1 / 1048576)GB"
	elif [ $1 -ge 1024 ]; then
		echo "$(scriptbc -p 2 $1 / 1024)MB"
	else
		echo "${1}KB"
	fi
}

function scriptbc() {
	if ["$1" = "-p" ] ; then
		precision=$2
		shift 2
	else
		precision=2
	fi

bc -q -l << EOF
scale=$precision
$*
quit
EOF

	return 0
}

function __preload() {
  # don't put duplicate lines or lines starting with space in the history.
  if [ ${historyControl} == "" ]; then
    HISTCONTROL=ignoreboth
  else
    HISTCONTROL=${historyControl}
  fi

  # append to the history file, don't overwrite it
  if [ ${historyControl} == "" ]; then
    shopt -s histappend
  else
    shopt -s ${historyAppend}
  fi

  # for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
  HISTSIZE=${historySize}
  HISTFILESIZE=${historyFileSize}

  # check the window size after each command and, if necessary,
  # update the values of LINES and COLUMNS.
  shopt -s checkwinsize

  # If set, the pattern "**" used in a pathname expansion context will
  # match all files and zero or more directories and subdirectories.
  shopt -s globstar

  # make less more friendly for non-text input files, see lesspipe(1)
  [ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

  # set a fancy prompt (non-color, unless we know we "want" color)
  case "$TERM" in
      xterm-color|*-256color) export color_prompt=yes;;
  esac

  [ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

  # enable programmable completion features (you don't need to enable
  # this, if it's already enabled in /etc/bash.bashrc and /etc/profile
  # sources /etc/bash.bashrc).
  if ! shopt -oq posix; then
      if [ -f /usr/share/bash-completion/bash_completion ]; then
          . /usr/share/bash-completion/bash_completion
      elif [ -f /etc/bash_completion ]; then
          . /etc/bash_completion
      fi
  fi

  # If using Zsh
  if [ -n "$ZSH_VERSION" ]; then
      # Source: https://stackoverflow.com/a/3964198/9157799
      chpwd_functions=(${chpwd_functions[@]} propose_dir_path)
  else
      cd()
      {
          builtin cd "$@" # https://unix.stackexchange.com/a/366974/307359
          propose_dir_path
      }
  fi

  cd ~
  echo "[$(LC_ALL=C date +"%Y-%m-%d %H:%M:%S")]:[SUCCESS]:[System Preload completed]:[LOADED]" >> ${logsLocation}/startup.log
  echo -e "$Aqua F1$White -$Silver Displays available commands and help"
}

# Define the session type as Local, then test at the end of the _preload
SESSION_TYPE="LOCAL"

# Check to see if there is an active SSH or TTY connection and set the SESSION TYPE
[ -z "$SSH_CLIENT" ] || export SESSION_TYPE="SSH"
[ -z "$SSH_TTY" ] || export SESSION_TYPE="SSH"
