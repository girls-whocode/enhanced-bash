#!/usr/bin/env bash

# ##################################################
# Shared bash functions used by my bash scripts.
#
# VERSION 1.4.0
#
# HISTORY
#
# * 2015-01-02 - v1.0.0   - First Creation
# * 2015-04-16 - v1.2.0   - Added 'checkDependencies' and 'pauseScript'
# * 2016-01-10 - v1.3.0   - Added 'join' function
# * 2016-01-11 - v1.4.9   - Added 'httpStatus' function
#
# ##################################################

# Traps
# ------------------------------------------------------
# These functions are for use with different trap scenarios
# ------------------------------------------------------
# Non destructive exit for when script exits naturally.
# Usage: Add this function at the end of every script

function safeExit() {
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  trap - INT TERM EXIT
  # exit
}

function function_exists() {
  declare -f -F $1 > /dev/null
  return $?
}

function showMatches() {
	matches=0
	echo -e "s/$pattern/${Red}$pattern${txtreset}/g" > $sedscript
	for lineno in $(grep -n "$pattern" $1 | cut -d: -f1)
	do
		if [ $context -gt 0 ]; then
			prev="$(( $lineno - $context ))"
			if [ $prev -lt 1 ]; then
				# This results in "invalid usage of line address 0."
				prev="1"
			fi
			x next="$(( $lineno + $context ))"
			if [ $matches -gt 0 ]; then
				echo "${prev}i\\" >> $sedscript
				echo "----" >> $sedscript
			fi
			echo "${prev},${next}p" >> $sedscript
		else
			echo "${lineno}p" >> $sedscript
		fi
		matches="$(( $matches + 1 ))"
	done

	if [ $matches -gt 0 ] ; then
		sed -n -f $sedscript $1 | uniq | more
	fi
}

function keycapture() {
  # Capture the escape seq. code for pressed key
  sed -n l
}

function chk_root(){
	local meid=$(id -u)
	if [ $meid -ne 0 ]; then
		warning "You must be root user to run this tool"
	fi
}

function readFile() {
  unset "${result}"
  while read result
  do
    echo "${result}"
  done < "$1"
}

function escape() {
  echo "${@}" | sed 's/[]\.|$(){}?+*^]/\\&/g';
}

function needSudo() {
  # needSudo
  # ------------------------------------------------------
  # If a script needs sudo access, call this function which
  # requests sudo access and then keeps it alive.
  # ------------------------------------------------------

  # Update existing sudo time stamp if set, otherwise do nothing.
  sudo -v
  while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
}

function convertsecs() {
  # convertsecs
  # ------------------------------------------------------
  # Convert Seconds to human readable time
  #
  # To use this, pass a number (seconds) into the function as this:
  # print "$(convertsecs $TOTALTIME)"
  #
  # To compute the time it takes a script to run use tag the start and end times with
  #   STARTTIME=$(date +"%s")
  #   ENDTIME=$(date +"%s")
  #   TOTALTIME=$(($ENDTIME-$STARTTIME))
  # ------------------------------------------------------

  ((h=${1}/3600))
  ((m=(${1}%3600)/60))
  ((s=${1}%60))
  printf "%02d:%02d:%02d\n" $h $m $s
}

function join() {
  # Join
  # ----------------------------------------------
  # This function joins items together with a user specified separator
  # Taken whole cloth from: 
  #   http://stackoverflow.com/questions/1527049/bash-join-elements-of-an-array
  #
  # Usage:
  #   join , a "b c" d #a,b c,d
  #   join / var local tmp #var/local/tmp
  #   join , "${FOO[@]}" #a,b,c
  # ----------------------------------------------

  local IFS="${1}";
  shift;
  echo "${*}";
}

function seek_confirmation() {
  # SEEKING CONFIRMATION
  # ------------------------------------------------------
  # Asks questions of a user and then does something with the answer.
  # y/n are the only possible answers.
  #
  # USAGE:
  # seek_confirmation "Ask a question"
  # if is_confirmed; then
  #   some action
  # else
  #   some other action
  # fi
  #
  # Credt: https://github.com/kevva/dotfiles
  # ------------------------------------------------------

  # Ask the question
  # echo ""
  input "$@"
  if "${force}"; then
    notice "Forcing confirmation with '--force' flag set"
  else
    read -p " (y/n) " -n 1
    echo ""
  fi
}

function is_confirmed() {
  # Test whether the result of an 'ask' is a confirmation
  if "${force}"; then
    return 0
  else
    if [[ "${REPLY}" =~ ^[Yy]$ ]]; then
      return 0
    fi
    return 1
  fi
}

function is_not_confirmed() {
  if "${force}"; then
    return 1
  else
    if [[ "${REPLY}" =~ ^[Nn]$ ]]; then
      return 0
    fi
    return 1
  fi
}

function skip() {
  # Skip something
  # ------------------------------------------------------
  # Offer the user a chance to skip something.
  # Credit: https://github.com/cowboy/dotfiles
  # ------------------------------------------------------

  REPLY=noskip
  read -t 5 -n 1 -s -p "${bold}To skip, press ${underline}X${reset}${bold} within 5 seconds.${reset}"
  if [[ "$REPLY" =~ ^[Xx]$ ]]; then
    notice "  Skipping!"
    return 0
  else
    notice "  Continuing..."
    return 1
  fi
}

function pauseScript() {
  # A simple function used to pause a script at any point and
  # only continue on user input
  seek_confirmation "Ready to continue?"
  if is_confirmed; then
    info "Continuing"
  else
    warning "Exiting Script."
    safeExit
  fi
}

function in_array() {
    # Determine if a value is in an array.
    # Usage: if in_array "VALUE" "${ARRAY[@]}"; then ...
    local value="$1"; shift
    for arrayItem in "$@"; do
        [[ "${arrayItem}" == "${value}" ]] && return 0
    done
    return 1
}

function __preload() {
  # don't put duplicate lines or lines starting with space in the history.
  if [ ${historyControl} == "" ]; then
    HISTCONTROL=ignoreboth
  else
    HISTCONTROL=${historyControl}
  fi

  # append to the history file, don't overwrite it
  if [ ${historyControl} == "" ]; then
    shopt -s histappend
  else
    shopt -s ${historyAppend}
  fi

  # for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
  HISTSIZE=${historySize}
  HISTFILESIZE=${historyFileSize}

  # check the window size after each command and, if necessary,
  # update the values of LINES and COLUMNS.
  shopt -s checkwinsize

  # If set, the pattern "**" used in a pathname expansion context will
  # match all files and zero or more directories and subdirectories.
  shopt -s globstar

  # make less more friendly for non-text input files, see lesspipe(1)
  [ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

  # set a fancy prompt (non-color, unless we know we "want" color)
  case "$TERM" in
      xterm-color|*-256color) export color_prompt=yes;;
  esac

  [ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

  # enable programmable completion features (you don't need to enable
  # this, if it's already enabled in /etc/bash.bashrc and /etc/profile
  # sources /etc/bash.bashrc).
  if ! shopt -oq posix; then
      if [ -f /usr/share/bash-completion/bash_completion ]; then
          . /usr/share/bash-completion/bash_completion
      elif [ -f /etc/bash_completion ]; then
          . /etc/bash_completion
      fi
  fi

  # If using Zsh
  if [ -n "$ZSH_VERSION" ]; then
      # Source: https://stackoverflow.com/a/3964198/9157799
      chpwd_functions=(${chpwd_functions[@]} propose_dir_path)
  else
      cd()
      {
          builtin cd "$@" || exit # https://unix.stackexchange.com/a/366974/307359
          propose_dir_path
      }
  fi

  cd ${OLDPWD}
  echo "[$(LC_ALL=C date +"%Y-%m-%d %H:%M:%S")]:[SUCCESS]:[System Preload completed]:[LOADED]" >> ${logsLocation}/startup.log
  echo -e "${Aqua} F1${White} -${Silver} Displays available commands and help"
}

# Define the session type as Local, then test at the end of the _preload
export SESSION_TYPE="LOCAL"

# Check to see if there is an active SSH or TTY connection and set the SESSION TYPE
[ -z "$SSH_CLIENT" ] || export SESSION_TYPE="SSH"
[ -z "$SSH_TTY" ] || export SESSION_TYPE="SSH"